%This program loads ASHP data (in the format generated by the Campbell
%datalogger), displays summary data (overall COP, etc.), and displays
%graphs that allow the user to zoom in a synchronized way and also select
%series to be displayed by clicking on series titles in the legend.
%
%This is the Juneau version that works with the wrong data.
%Wrong data is the data collected until 2014-11-08. In that data, the flow
%was calculated incorrectly from the flow sensor voltage. On 2014-11-08 the
%datalogger program was corrected so the flow is now calculated correctly.

clear;

%Input:
file_name='Juneau_JNU_ASHP_TenSecond - till 2014-11-08.dat'; %Specify the file from which you want to read data

%Load the input file:
fid=fopen(file_name,'r');
data=textscan(fid,'%s %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f','Delimiter',',','CollectOutput',true,'HeaderLines',4,'ReturnOnError',false,'TreatAsEmpty','"NAN"');
    %returns a cell array with two cells - each cell is an array - the first array is the dates and times, and second array is the numbers
fclose(fid);
%this takes too long for big input files:
x=datenum(data{1},'"yyyy-mm-dd HH:MM:SS"'); %X axis is the date and time, which means the first array of the loaded data
%so, instead, one can use this, which takes less time, but is less accurate:
%x=datenum(data{1}((end-1):end)); %X axis is the date and time, which means the first array of the loaded data, but convert the last two only and assume there are no gaps, otherwise it takes a long time
%x=transpose(linspace(x(2)-(x(2)-x(1))*(length(data{1})-1),x(2),length(data{1}))); %create the whole X axis by extrapolating the last two samples
%
logging_interval=(x(2)-x(1))*24*60*60; %Calculate the logging interval (in seconds) from the first two time stamps
data=data{2}(:,2:21); %Take the second array of the loaded data, delete the first column (record #) and overwrite the variable data with it (this will save memory)

%Break the data matrix into individual variables (vectors):
T_SupplyHP1=data(:,1); %Supply T in F for HP1
T_SupplyHP2=data(:,2); %Supply T in F for HP2
T_SupplyHouse=data(:,3); %Supply T in F for House
T_SupplyDHW=data(:,4); %Supply T in F for DHW
T_ReturnHP1=data(:,5); %Return T in F for HP1
T_ReturnHP2=data(:,6); %Return T in F for HP2
T_ReturnHouse=data(:,7); %Return T in F for House
T_ReturnDHW=data(:,8); %Return T in F for DHW
T_Coil1=data(:,9); %Outdoor coil T in F for HP1
T_Coil2=data(:,10); %Outdoor coil T in F for HP2
T_Outside=data(:,11); %Outside T in F
P_HP1hydro=data(:,12); %Eletrical power in W for Hydrobox1
P_HP2hydro=data(:,13); %Eletrical power in W for Hydrobox2
P_HP1out=data(:,14); %Electrical power in W for the outsides unit of HP1
P_HP2out=data(:,15); %Electrical power in W for the outsides unit of HP2
P_DHW=data(:,16); %Electrical power in W for DHW heater
%These are used just for a reverse calculation to correct a problem in the
%datalogger program:
HeatfromHP1_BTU_Avg=data(:,17);
HeatfromHP2_BTU_Avg=data(:,18);
Heattohouse_BTU_Avg=data(:,19);
HeattoDHW_BTU_Avg=data(:,20);

%Do a reversa calculation using Vanessa's program in the datalogger to
%arrive at voltage measured at the flow sensors:

    %to convert voltage to flow in gpm for grundos 10-200
    slope = 190/3;  %slope from points (10 lpm, 0.5 V) and (200 lpm, 3.5 V)
    yintercept = .35; %when flow is zero then flowmeter records 0.35 V
    litertogallon = 0.26417206; %to convert liters per minute to gallons per minute
    
    %heat flow constants
    densitywater_lbpgal = 8.304;   %source Engineering Toolbox, 90F
    specificheatwater_BTUplbpF = 1; %BTU/(lbF)
    scaninterval = 25/600; %scan interval in minutes
    heatconstant = scaninterval * specificheatwater_BTUplbpF * densitywater_lbpgal;
    
    %reverse calcuations:
    JNU_Flow_V_DHW=HeattoDHW_BTU_Avg/heatconstant./(T_SupplyDHW-T_ReturnDHW)/litertogallon*slope + yintercept;
    JNU_Flow_V_House=Heattohouse_BTU_Avg/heatconstant./(T_SupplyHouse-T_ReturnHouse)/litertogallon*slope + yintercept;
    JNU_Flow_V_HP2=HeatfromHP2_BTU_Avg/heatconstant./(T_SupplyHP2-T_ReturnHP2)/litertogallon*slope + yintercept;
    JNU_Flow_V_HP1=HeatfromHP1_BTU_Avg/heatconstant./(T_SupplyHP1-T_ReturnHP1)/litertogallon*slope + yintercept;

%Now forward calculations the correct way:
Flow_HP1=(JNU_Flow_V_HP1-yintercept)*slope*litertogallon; %Flow in gal/min
Flow_HP2=(JNU_Flow_V_HP2-yintercept)*slope*litertogallon; %Flow in gal/min
Flow_House=(JNU_Flow_V_House-yintercept)*slope*litertogallon; %Flow in gal/min
Flow_DHW=(JNU_Flow_V_DHW-yintercept)*slope*litertogallon; %Flow in gal/min

VHC=specificheatwater_BTUplbpF*densitywater_lbpgal; %Volumetric heat capacity of water in Btu/gal-F

Heat_rate_HP1=Flow_HP1.*(T_SupplyHP1-T_ReturnHP1)*VHC*60; %Heat output rate in Btu/h
Heat_rate_HP2=Flow_HP2.*(T_SupplyHP2-T_ReturnHP2)*VHC*60; %Heat output rate in Btu/h
Heat_rate_House=Flow_House.*(T_SupplyHouse-T_ReturnHouse)*VHC*60; %Heat output rate in Btu/h
Heat_rate_DHW=Flow_DHW.*(T_SupplyDHW-T_ReturnDHW)*VHC*60; %Heat output rate in Btu/h

P_output_HP1=Heat_rate_HP1/3.412; %Heat output rate in W
P_output_HP2=Heat_rate_HP2/3.412; %Heat output rate in W
P_output_House=Heat_rate_House/3.412; %Heat output rate in W
P_output_DHW=Heat_rate_DHW/3.412; %Heat output rate in W

P_input_HP1=P_HP1hydro+P_HP1out; %Total input power of HP1
P_input_HP2=P_HP2hydro+P_HP2out; %Total input power of HP2

COP_HP1_HB=P_output_HP1./P_input_HP1; %COP of HP1 measured at the Hydrobox
COP_HP1_DHW=P_output_DHW./P_input_HP1; %COP of HP1 measured at the DHW tank
COP_HP2_HB=P_output_HP2./P_input_HP2; %COP of HP2 measured at the Hydrobox
COP_HP2_House=P_output_House./P_input_HP2; %COP of HP2 measured at the house

%Plot data for HP1:
figure('units','normalized','outerposition',[0 0 1 1],'name','HP1');
%Plot the first graph:
plotHP1_1=subplot(3,1,1);
plot(x,[T_Coil1,T_Outside,T_SupplyHP1,T_SupplyDHW,T_ReturnHP1,T_ReturnDHW],'.');
hold on;
plot(x,[Flow_HP1,Flow_DHW],'p','MarkerSize',5);
xlabel('time [hours]');
ylabel('T [F], Flow [gpm]');
clickableLegend({'T_{coil1}','T_{Outside}','T_{SupplyHP1}','T_{SupplyDHW}','T_{ReturnHP1}','T_{ReturnDHW}','Flow_{HP1}','Flow_{DHW}'}); %This function was downloaded from http://www.mathworks.com/matlabcentral/fileexchange/21799-clickablelegend
grid on;
%Plot the second graph:
plotHP1_2=subplot(3,1,2);
plot(x,[P_HP1hydro,P_HP1out,P_DHW],'.');
xlabel('time [hours]');
ylabel('P [W]');
clickableLegend({'P_{input HP1hydro}','P_{input HP1outside}','P_{input DHW}'}); %This function was downloaded from http://www.mathworks.com/matlabcentral/fileexchange/21799-clickablelegend
grid on;
%Plot the third graph:
plotHP1_3=subplot(3,1,3);
plot(x,[P_input_HP1,P_output_HP1,P_output_DHW,COP_HP1_HB*100,COP_HP1_DHW*100],'.');
xlabel('time [hours]');
ylabel('P [W], COP [%]');
clickableLegend({'P_{input HP1}','P_{output HP1}','P_{output DHW}','COP_{HP1 HB}','COP_{HP1 DHW}'}); %This function was downloaded from http://www.mathworks.com/matlabcentral/fileexchange/21799-clickablelegend
grid on;

%Plot data for HP2:
figure('units','normalized','outerposition',[0 0 1 1],'name','HP2');
%Plot the first graph:
plotHP2_1=subplot(3,1,1);
plot(x,[T_Coil2,T_Outside,T_SupplyHP2,T_SupplyHouse,T_ReturnHP2,T_ReturnHouse],'.');
hold on;
plot(x,[Flow_HP2,Flow_House],'p','MarkerSize',5);
xlabel('time [hours]');
ylabel('T [F], Flow [gpm]');
clickableLegend({'T_{coil2}','T_{Outside}','T_{SupplyHP2}','T_{SupplyHouse}','T_{ReturnHP2}','T_{ReturnHouse}','Flow_{HP2}','Flow_{House}'}); %This function was downloaded from http://www.mathworks.com/matlabcentral/fileexchange/21799-clickablelegend
grid on;
%Plot the second graph:
plotHP2_2=subplot(3,1,2);
plot(x,[P_HP2hydro,P_HP2out],'.');
xlabel('time [hours]');
ylabel('P [W]');
clickableLegend({'P_{input HP2hydro}','P_{input HP2outside}'}); %This function was downloaded from http://www.mathworks.com/matlabcentral/fileexchange/21799-clickablelegend
grid on;
%Plot the third graph:
plotHP2_3=subplot(3,1,3);
plot(x,[P_input_HP2,P_output_HP2,P_output_House,COP_HP2_HB*100,COP_HP2_House*100],'.');
xlabel('time [hours]');
ylabel('P [W], COP [%]');
clickableLegend({'P_{input HP2}','P_{output HP2}','P_{output House}','COP_{HP2 HB}','COP_{HP2 House}'}); %This function was downloaded from http://www.mathworks.com/matlabcentral/fileexchange/21799-clickablelegend
grid on;

%Synchronize zoom for all six graphs:
linkaxes([plotHP1_1,plotHP1_2,plotHP1_3,plotHP2_1,plotHP2_2,plotHP2_3],'x');

%Show date and time on x axes:
dynamicDateTicks([plotHP1_1,plotHP1_2,plotHP1_3],'linked'); %This function was donwloaded from http://www.mathworks.com/matlabcentral/fileexchange/27075-intelligent-dynamic-date-ticks
dynamicDateTicks([plotHP2_1,plotHP2_2,plotHP2_3],'linked'); %This function was donwloaded from http://www.mathworks.com/matlabcentral/fileexchange/27075-intelligent-dynamic-date-ticks

%Calculate summary data for HP1:
Total_E_input_HP1=nansum(P_input_HP1)*logging_interval/3600/1000; %Total energy input in kWh
Total_E_output_HP1=nansum(P_output_HP1)*logging_interval/3600/1000; %Total energy output in kWh
Total_COP_HP1=Total_E_output_HP1/Total_E_input_HP1; %Total COP
%Display summary data for HP1:
fprintf('HP1 - input energy: %f kWh \n',Total_E_input_HP1);
fprintf('HP1 - output energy: %f kWh \n',Total_E_output_HP1);
fprintf('HP1 - overall COP: %f \n',Total_COP_HP1);

%Calculate summary data for HP1:
Total_E_input_HP2=nansum(P_input_HP2)*logging_interval/3600/1000; %Total energy input in kWh
Total_E_output_HP2=nansum(P_output_HP2)*logging_interval/3600/1000; %Total energy output in kWh
Total_COP_HP2=Total_E_output_HP2/Total_E_input_HP2; %Total COP
%Display summary data for HP1:
fprintf('HP2 - input energy: %f kWh \n',Total_E_input_HP2);
fprintf('HP2 - output energy: %f kWh \n',Total_E_output_HP2);
fprintf('HP2 - overall COP: %f \n',Total_COP_HP2);

Avg_T_Outside=mean(T_Outside); %Average outside temperature
fprintf('Average outside temperature: %f F \n',Avg_T_Outside);
