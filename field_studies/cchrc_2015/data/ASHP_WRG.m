%This program loads ASHP data (in the format generated by the Campbell
%datalogger), displays summary data (overall COP, etc.), and displays
%graphs that allow the user to zoom in a synchronized way and also select
%series to be displayed by clicking on series titles in the legend. When
%zooming, the program dynamically updates performance data (COP, etc.) for
%the interval that the user zooms onto. This performance data is displayed
%above the lower graph.
%
%This is the Wrangell version (the difference between the Dillingham and
%Wrangell versions is in the proxy calibration curve for the airflow).

clear;

%Input:
file_name='Wrangell_WRG_DHP_TenSecond.dat'; %Specify the file from which you want to read data

%Global variables:
global x logging_interval T_out P_input P_output; %dynamicDataDisplay function will need these to calculate the performance data for the selected interval

%Constants:
c_p = 0.240; %Specific heat of air in Btu/lb-F
ro=0.0749; %Density of air (in lb/ft^3) at standard conditions
VHC=c_p*ro; %Volumetric heat capacity of air in Btu/ft^3-F

%Load the input file:
fid=fopen(file_name,'r');
data=textscan(fid,'%s %f %f %f %f %f %f %f %f %f %f %f','Delimiter',',','CollectOutput',true,'HeaderLines',4,'ReturnOnError',false,'TreatAsEmpty','"NAN"');
    %returns a cell array with two cells - each cell is an array - the first array is the dates and times, and second array is the numbers
fclose(fid);
%this takes too long for big input files:
x=datenum(data{1},'"yyyy-mm-dd HH:MM:SS"'); %X axis is the date and time, which means the first array of the loaded data
%so, instead, one can use this, which takes less time, but is less accurate:
%x=datenum(data{1}((end-1):end)); %X axis is the date and time, which means the first array of the loaded data, but convert the last two only and assume there are no gaps, otherwise it takes a long time
%x=transpose(linspace(x(2)-(x(2)-x(1))*(length(data{1})-1),x(2),length(data{1}))); %create the whole X axis by extrapolating the last two samples
%
logging_interval=(x(2)-x(1))*24; %Calculate the logging interval (in hours) from the first two time stamps
data=data{2}(:,2:11); %Take the second array of the loaded data, delete the first column (record #) and overwrite the variable data with it (this will save memory)

%Break the data matrix into individual variables (vectors):
T_deliv=mean(data(:,1:3),2); %Delivery T in F
T_return=mean(data(:,4:6),2); %Return T in F
T_coil=data(:,7); %Outdoor coil T in F
T_out=data(:,8); %Outdoor T in F
P_input=data(:,9); %Input electrical power in W
Airspeed=data(:,10); %Air speed in fpm

%Calculate the airflow from the air speed:
Airflow=0.8914*Airspeed+14.565; %Air flow in cfm from proxy calibration
Nonzero_speed=Airspeed>40; %Speed less than 40 fpm counts as zero speed
Airflow=Airflow.*Nonzero_speed; %Zero speed means zero flow

%Calculate the heat output:
Heat_rate=Airflow.*(T_deliv-T_return)*VHC*60; %Heat output rate in Btu/h
P_output=Heat_rate/3.412; %Heat output rate in W

%Calculate the COP:
COP = P_output./P_input;
Running=P_input>100; %The ASHP is considered actively running when input P > 100 W
COP = COP.*Running; %Only show COP when ASHP is running, otherwise show zero

%Plot data:
figure('units','normalized','outerposition',[0 0 1 1]);
%Plot the first graph:
plot1=subplot(2,1,1); 
plot(x,[T_coil,T_out,T_deliv,T_return],'.');
hold on;
plot(x,Airflow,'.','MarkerSize',1);
xlabel('date & time');
ylabel('T [F], Airflow [cfm]');
clickableLegend({'T_{coil}','T_{out}','T_{deliv}','T_{return}','Airflow'}); %This function was downloaded from http://www.mathworks.com/matlabcentral/fileexchange/21799-clickablelegend
grid on;
%Plot the second graph:
plot2=subplot(2,1,2);
plot(x,[P_input,P_output,COP*100],'.');
xlabel('date & time');
ylabel('P [W], COP [%]');
clickableLegend({'P_{input}','P_{output}','COP'}); %This function was downloaded from http://www.mathworks.com/matlabcentral/fileexchange/21799-clickablelegend
grid on;
%Synchronize zoom for both graphs:
linkaxes([plot1,plot2],'x');
%Show date and time on x axes:
%datetick('x');
dynamicDateTicks([plot1,plot2],'linked'); %This function was donwloaded from http://www.mathworks.com/matlabcentral/fileexchange/27075-intelligent-dynamic-date-ticks

%Calculate summary data:
Total_E_input=nansum(P_input)*logging_interval/1000; %Total energy input in kWh
Total_E_output=nansum(P_output)*logging_interval/1000; %Total energy output in kWh
Total_COP=Total_E_output/Total_E_input; %Total COP
%Display summary data:
fprintf('Input energy: %f kWh \n',Total_E_input);
fprintf('Output energy: %f kWh \n',Total_E_output);
fprintf('Overall COP: %f \n',Total_COP);

%Dynamically display performance data (COP, etc.) for the interval that the
%user zoomes onto:
dynamicDataDisplay(plot2);
